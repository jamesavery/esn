import numpy as np
import scipy
from scipy.linalg import lstsq
import statsmodels.api as sm

def create_readout_matrix(dynsys, H, targets,lstsq_method='scipy',dtype=None):
    """
    Compute the output matrix `Who` via least squares. 
    and add it to the dynsys tuple to create a model tuple.

    Params:
        dynsys: ESN tuple (mapih, Whh, bh)
        H:      state matrix as generated by 
                `evolve_hidden_state` in mode `train`.
                Might have been dimension reduced,
                according to hidden.dimension_reduce()
        targets: training targets (time, height, width)
        
    Returns:
        
        (mapih, Whh, bh, Who): dynsys + Who tuple
    
    """
    if lstsq_method == 'scipy':
        Who = lstsq_scipy(H,targets,lstsq_thresh=1e-10,dtype=dtype)
    else:
        Who = lstsq_svd(H, targets,lstsq_thresh=1e-4,dtype=dtype)
    
    return dynsys + (Who,)

def lstsq_svd(H, targets, lstsq_thresh=1e-4, dtype=None):

    if targets.ndim != 2:
        raise ValueError("targets must have shape (time, features)")
    
    # Reduced SVD
    U, s, Vh = scipy.linalg.svd(H, full_matrices=False)
    
    # largest singular value
    scale = s[0]
    
    # Ensure condition number less than 1/thresh
    n = np.sum(np.abs(s/scale) > lstsq_thresh)  
    
    v = Vh[:n, :]
    uh = U[:, :n]

    Who =  np.dot(np.dot(targets.T, uh) / s[:n], v) 
    
    #alpha = s[0]*0.001
    #print(f'Tikhonov with parameter {alpha}, largest Singualar value: {s[0]:.3e}')
    #Who =  np.dot(s*np.dot(L, Vh.T) / (alpha +s**2), U.T)
    return np.asarray(Who,dtype=dtype)


def lstsq_scipy(H, targets, lstsq_thresh=1e-10,dtype=None):
    """
    Note: thresh is minimal value of singular value. I.e. not relative
    to largest sv as in lstsq_svd.
    """
    Who, residues, rank, s = lstsq(H, targets, cond=lstsq_thresh)
    print(f'lstsq_thresh {lstsq_thresh}')
    print(f'Training MSE: {residues.mean():.2e}')
    print(f'Rank: {rank}')
    
    return np.asarray(Who.T,dtype=dtype)
    